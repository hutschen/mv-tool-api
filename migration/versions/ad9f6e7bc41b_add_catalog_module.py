"""add catalog module

Revision ID: ad9f6e7bc41b
Revises: 52864629f869
Create Date: 2022-10-07 18:52:49.753172

"""
from alembic import op
import sqlalchemy as sa
from sqlmodel.sql.sqltypes import AutoString


# revision identifiers, used by Alembic.
revision = "ad9f6e7bc41b"
down_revision = "52864629f869"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "catalog_module",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column("reference", AutoString(), nullable=True),
        sa.Column("title", AutoString(), nullable=False),
        sa.Column("description", AutoString(), nullable=True),
        sa.Column("gs_reference", AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )

    # copy data from gs_baustein to catalog_module
    op.execute(
        """
        INSERT INTO catalog_module (id, created, updated, title, gs_reference)
        SELECT id, created, updated, title, reference FROM gs_baustein
        """
    )

    # add column requirement.catalog_module_id
    with op.batch_alter_table("requirement", schema=None) as batch_op:
        batch_op.add_column(sa.Column("catalog_module_id", sa.Integer(), nullable=True))
        batch_op.create_foreign_key(
            None, "catalog_module", ["catalog_module_id"], ["id"]
        )

    # copy data from requirement.gs_baustein_id to requirement.catalog_module_id
    op.execute(
        """
        UPDATE requirement SET catalog_module_id = gs_baustein_id
        """
    )

    # drop column requirement.gs_baustein_id
    with op.batch_alter_table("requirement", schema=None) as batch_op:
        batch_op.drop_constraint(
            "fk_requirement_gs_baustein_id_gs_baustein", type_="foreignkey"
        )
        batch_op.drop_column("gs_baustein_id")

    # drop table gs_baustein
    op.drop_table("gs_baustein")


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("requirement", schema=None) as batch_op:
        batch_op.add_column(sa.Column("gs_baustein_id", sa.INTEGER(), nullable=True))
        batch_op.drop_constraint(
            "fk_requirement_catalog_module_id_catalog_module", type_="foreignkey"
        )
        batch_op.create_foreign_key(None, "gs_baustein", ["gs_baustein_id"], ["id"])
        batch_op.drop_column("catalog_module_id")

    op.create_table(
        "gs_baustein",
        sa.Column("id", sa.INTEGER(), nullable=False),
        sa.Column("reference", sa.VARCHAR(), nullable=False),
        sa.Column("title", sa.VARCHAR(), nullable=False),
        sa.Column("created", sa.DATETIME(), nullable=False),
        sa.Column("updated", sa.DATETIME(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_table("catalog_module")
    # ### end Alembic commands ###
