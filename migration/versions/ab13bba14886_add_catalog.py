"""add catalog

Revision ID: ab13bba14886
Revises: ad9f6e7bc41b
Create Date: 2022-10-07 21:40:28.491366

"""
from alembic import op
import sqlalchemy as sa
from sqlmodel.sql.sqltypes import AutoString
from datetime import datetime


# revision identifiers, used by Alembic.
revision = "ab13bba14886"
down_revision = "ad9f6e7bc41b"
branch_labels = None
depends_on = None


def upgrade() -> None:
    catalog_table = op.create_table(
        "catalog",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column("reference", AutoString(), nullable=True),
        sa.Column("title", AutoString(), nullable=False),
        sa.Column("description", AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("catalog_module", schema=None) as batch_op:
        batch_op.add_column(sa.Column("catalog_id", sa.Integer(), nullable=True))
        batch_op.create_foreign_key(
            "fk_catalog_module_catalog", "catalog", ["catalog_id"], ["id"]
        )

    # check if catalog modules are existing
    catalog_module_count = (
        op.get_bind().execute("SELECT COUNT(*) FROM catalog_module").scalar()
    )
    if not catalog_module_count:
        # without catalog modules no default catalog has to be created
        return

    # Otherwise generate a corresponding catalog
    catalog_data = {
        "created": datetime.utcnow(),
        "updated": datetime.utcnow(),
        "title": "Default Catalog",
        "description": "This catalog has been automatically generated",
    }
    # insert default catalog and get the corresponding id
    catalog_id = (
        op.get_bind()
        .execute(catalog_table.insert().values(catalog_data))
        .inserted_primary_key[0]
    )

    # update catalog ids for catalog modules without a catalog id
    op.execute(
        "UPDATE catalog_module SET catalog_id=%d WHERE catalog_id IS NULL" % catalog_id
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("catalog_module", schema=None) as batch_op:
        batch_op.drop_constraint("fk_catalog_module_catalog", type_="foreignkey")
        batch_op.drop_column("catalog_id")

    op.drop_table("catalog")
    # ### end Alembic commands ###
