"""add catalog requirement

Revision ID: 4cd3702a9e46
Revises: ab13bba14886
Create Date: 2022-10-29 20:27:46.841610

"""
from alembic import op
import sqlalchemy as sa
from sqlmodel.sql.sqltypes import AutoString


# revision identifiers, used by Alembic.
revision = "4cd3702a9e46"
down_revision = "ab13bba14886"
branch_labels = None
depends_on = None


def upgrade() -> None:
    op.create_table(
        "catalog_requirement",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column("reference", AutoString(), nullable=True),
        sa.Column("summary", AutoString(), nullable=False),
        sa.Column("description", AutoString(), nullable=True),
        sa.Column("gs_anforderung_reference", AutoString(), nullable=True),
        sa.Column("gs_absicherung", AutoString(), nullable=True),
        sa.Column("gs_verantwortliche", AutoString(), nullable=True),
        sa.Column("catalog_module_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["catalog_module_id"],
            ["catalog_module.id"],
            name=op.f("fk_catalog_requirement_catalog_module_id_catalog_module"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_catalog_requirement")),
    )

    # copy data from requirement to catalog_requirement
    op.execute(
        """
        INSERT INTO catalog_requirement (
            id, created, updated, reference, summary, description, 
            gs_anforderung_reference, gs_absicherung, gs_verantwortliche, 
            catalog_module_id)
        SELECT id, created, updated, reference, summary, description, 
            gs_anforderung_reference, gs_absicherung, gs_verantwortliche, 
            catalog_module_id
        FROM requirement WHERE catalog_module_id IS NOT NULL
        """
    )

    if op.get_context().dialect.name == "postgresql":
        op.execute(
            """
            SELECT setval(
                pg_get_serial_sequence('catalog_requirement', 'id'),
                (SELECT MAX(id) FROM catalog_requirement)
            )
            """
        )

    with op.batch_alter_table("requirement", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("catalog_requirement_id", sa.Integer(), nullable=True)
        )
        batch_op.drop_constraint(
            batch_op.f("fk_requirement_catalog_module_id_catalog_module"),
            type_="foreignkey",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_requirement_catalog_requirement_id_catalog_requirement"),
            "catalog_requirement",
            ["catalog_requirement_id"],
            ["id"],
        )
        batch_op.drop_column("gs_absicherung")
        batch_op.drop_column("gs_anforderung_reference")
        batch_op.drop_column("catalog_module_id")
        batch_op.drop_column("gs_verantwortliche")

    # reference catalog_requirement in requirement
    op.execute(
        """
        UPDATE requirement
        SET catalog_requirement_id = catalog_requirement.id
        FROM catalog_requirement
        WHERE requirement.id = catalog_requirement.id
        """
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("requirement", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("gs_verantwortliche", sa.VARCHAR(), nullable=True)
        )
        batch_op.add_column(sa.Column("catalog_module_id", sa.INTEGER(), nullable=True))
        batch_op.add_column(
            sa.Column("gs_anforderung_reference", sa.VARCHAR(), nullable=True)
        )
        batch_op.add_column(sa.Column("gs_absicherung", sa.VARCHAR(), nullable=True))
        batch_op.drop_constraint(
            batch_op.f("fk_requirement_catalog_requirement_id_catalog_requirement"),
            type_="foreignkey",
        )
        batch_op.create_foreign_key(
            batch_op.f("fk_requirement_catalog_module_id_catalog_module"),
            "catalog_module",
            ["catalog_module_id"],
            ["id"],
        )
        batch_op.drop_column("catalog_requirement_id")

    op.drop_table("catalog_requirement")
    # ### end Alembic commands ###
